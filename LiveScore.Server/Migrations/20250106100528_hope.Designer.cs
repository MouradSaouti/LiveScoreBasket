// <auto-generated />
using System;
using LiveScore.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiveScore.Server.Migrations
{
    [DbContext(typeof(BasketDbContext))]
    [Migration("20250106100528_hope")]
    partial class hope
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConfigurationMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateHeure")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("DureeQuartTemps")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("DureeTimeout")
                        .HasColumnType("time");

                    b.Property<int?>("EquipeDomicileId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipeExterieurId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("NomMatch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NombreQuartTemps")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipeDomicileId");

                    b.HasIndex("EquipeExterieurId");

                    b.HasIndex("MatchId")
                        .IsUnique()
                        .HasFilter("[MatchId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("ConfigurationsMatch");
                });

            modelBuilder.Entity("Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("EstEquipeDomicile")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("Joueur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taille")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("estCapitaine")
                        .HasColumnType("bit");

                    b.Property<bool>("estEnJeu")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Joueurs");
                });

            modelBuilder.Entity("LiveScore.Server.Models.ChronoMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("TempsRestant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("ChronoMatchs");
                });

            modelBuilder.Entity("LiveScore.Server.Models.CinqDeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int>("JoueurId")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.HasIndex("JoueurId");

                    b.HasIndex("MatchId");

                    b.ToTable("CinqsDeBase");
                });

            modelBuilder.Entity("LiveScore.Server.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId")
                        .IsUnique();

                    b.ToTable("Coachs");
                });

            modelBuilder.Entity("LiveScore.Server.Models.EvenementMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EncodageUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int?>("JoueurEntrantId")
                        .HasColumnType("int");

                    b.Property<int?>("JoueurId")
                        .HasColumnType("int");

                    b.Property<int?>("JoueurSortantId")
                        .HasColumnType("int");

                    b.Property<int?>("JoueurVictimeId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchId")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Temps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeEvenement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFaute")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EncodageUserId");

                    b.HasIndex("EquipeId");

                    b.HasIndex("JoueurId");

                    b.HasIndex("JoueurVictimeId");

                    b.HasIndex("MatchId");

                    b.ToTable("EvenementsMatch");
                });

            modelBuilder.Entity("LiveScore.Server.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentQuarter")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMatch")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipeDomicileId")
                        .HasColumnType("int");

                    b.Property<int>("EquipeExterieurId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreDomicile")
                        .HasColumnType("int");

                    b.Property<int>("ScoreExterieur")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeDomicileId");

                    b.HasIndex("EquipeExterieurId");

                    b.ToTable("Matchs");
                });

            modelBuilder.Entity("LiveScore.Server.Models.MatchTimeout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Timeouts");
                });

            modelBuilder.Entity("LiveScore.Server.Models.SubPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerInId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerOutId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerInId");

                    b.HasIndex("PlayerOutId");

                    b.ToTable("SubPlayers");
                });

            modelBuilder.Entity("LiveScore.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConfigurationMatch", b =>
                {
                    b.HasOne("Equipe", "EquipeDomicile")
                        .WithMany()
                        .HasForeignKey("EquipeDomicileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Equipe", "EquipeExterieur")
                        .WithMany()
                        .HasForeignKey("EquipeExterieurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithOne("Configuration")
                        .HasForeignKey("ConfigurationMatch", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveScore.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipeDomicile");

                    b.Navigation("EquipeExterieur");

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Joueur", b =>
                {
                    b.HasOne("Equipe", "Equipe")
                        .WithMany("Joueurs")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("LiveScore.Server.Models.ChronoMatch", b =>
                {
                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithOne("ChronoMatch")
                        .HasForeignKey("LiveScore.Server.Models.ChronoMatch", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("LiveScore.Server.Models.CinqDeBase", b =>
                {
                    b.HasOne("Equipe", "Equipe")
                        .WithMany()
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Joueur", "Joueur")
                        .WithMany()
                        .HasForeignKey("JoueurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");

                    b.Navigation("Joueur");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("LiveScore.Server.Models.Coach", b =>
                {
                    b.HasOne("Equipe", "Equipe")
                        .WithOne("Coach")
                        .HasForeignKey("LiveScore.Server.Models.Coach", "EquipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("LiveScore.Server.Models.EvenementMatch", b =>
                {
                    b.HasOne("LiveScore.Server.Models.User", "EncodageUser")
                        .WithMany()
                        .HasForeignKey("EncodageUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Equipe", "Equipe")
                        .WithMany()
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Joueur", "Joueur")
                        .WithMany()
                        .HasForeignKey("JoueurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Joueur", "JoueurVictime")
                        .WithMany()
                        .HasForeignKey("JoueurVictimeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EncodageUser");

                    b.Navigation("Equipe");

                    b.Navigation("Joueur");

                    b.Navigation("JoueurVictime");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("LiveScore.Server.Models.Match", b =>
                {
                    b.HasOne("Equipe", "EquipeDomicile")
                        .WithMany()
                        .HasForeignKey("EquipeDomicileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Equipe", "EquipeExterieur")
                        .WithMany()
                        .HasForeignKey("EquipeExterieurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipeDomicile");

                    b.Navigation("EquipeExterieur");
                });

            modelBuilder.Entity("LiveScore.Server.Models.MatchTimeout", b =>
                {
                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithMany("Timeouts")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("LiveScore.Server.Models.SubPlayer", b =>
                {
                    b.HasOne("LiveScore.Server.Models.Match", "Match")
                        .WithMany("SubPlayers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Joueur", "PlayerIn")
                        .WithMany()
                        .HasForeignKey("PlayerInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Joueur", "PlayerOut")
                        .WithMany()
                        .HasForeignKey("PlayerOutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("PlayerIn");

                    b.Navigation("PlayerOut");
                });

            modelBuilder.Entity("Equipe", b =>
                {
                    b.Navigation("Coach");

                    b.Navigation("Joueurs");
                });

            modelBuilder.Entity("LiveScore.Server.Models.Match", b =>
                {
                    b.Navigation("ChronoMatch");

                    b.Navigation("Configuration");

                    b.Navigation("SubPlayers");

                    b.Navigation("Timeouts");
                });
#pragma warning restore 612, 618
        }
    }
}
